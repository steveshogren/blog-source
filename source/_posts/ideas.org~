
Simple F# Unit Test Mocking

If you are writing much F#, you possibly are curious how you might handle unit test mocking. In a language like C# or Java, the common method is to a DI container or handmade constructor injection. These "entry points" allow for a unit test to replace a real dependency with a test-only replacement. 

I previously posted an example that shows a much simpler way to inject dependencies that allows much less code with equivalent safety. The "SimpleMock" pattern can also be used in F#, but it isn't always necessary if you are not using classes. F# has a much simpler way to allow for dependency injection via currying.

``` fsharp
let addAndSave x y =
  let sum = x + y
  DB.saveSum sum
  sum
``` 


* Safety Score
** Exceptions (checked, unchecked)
** variable shadowing 
